"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import servers as shared_servers
from typing import Optional


@dataclasses.dataclass
class GetServersSecurity:
    
    bearer: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetServersRequest:
    
    extra_fields_servers: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'extra_fields[servers]', 'style': 'form', 'explode': True }})
    r"""The `credentials` are provided as extra attributes that is lazy loaded. To request it, just set `extra_fields[servers]=credentials` in the query string."""  
    filter_created_at_gte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[created_at_gte]', 'style': 'form', 'explode': True }})
    r"""The created at greater than equal date to filter by"""  
    filter_created_at_lte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[created_at_lte]', 'style': 'form', 'explode': True }})
    r"""The created at less than equal date to filter by"""  
    filter_hostname: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[hostname]', 'style': 'form', 'explode': True }})
    r"""The hostname of server to filter by"""  
    filter_label: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[label]', 'style': 'form', 'explode': True }})
    r"""The label of server to filter by"""  
    filter_operating_system: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[operating_system]', 'style': 'form', 'explode': True }})
    r"""The operating system name or slug of the server to filter by"""  
    filter_plan: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[plan]', 'style': 'form', 'explode': True }})
    r"""The platform/plan name of the server to filter by"""  
    filter_project: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[project]', 'style': 'form', 'explode': True }})
    r"""The project ID or Slug to filter by"""  
    filter_region: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[region]', 'style': 'form', 'explode': True }})
    r"""The region Slug to filter by"""  
    filter_status: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[status]', 'style': 'form', 'explode': True }})
    r"""The status of server to filter by"""  
    

@dataclasses.dataclass
class GetServersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    servers: Optional[shared_servers.Servers] = dataclasses.field(default=None)
    r"""Success"""  
    